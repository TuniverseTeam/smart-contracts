{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xe5587dE74dBb067F215056Deb9BC9Fba7cae57dB",
    "txHash": "0xadb3004e458c233eccf1e5766791b1273bcf97b0feac82000831b52159709760"
  },
  "proxies": [
    {
      "address": "0xCc95F9bf46695fc9CA7d03B78bf62716bE0FD9c8",
      "txHash": "0xc70ba0623c17ba6e25bbda0eb507325b1b8421f508861a4a40e8e944d1378a02",
      "kind": "transparent"
    },
    {
      "address": "0x66DBAFeD9a18FE8bda3a0DCf1d9c9E690036786C",
      "txHash": "0x33462ca102f9901f27292e5c21ae7cd5f3d9ce247b137020a02365fe7eec0c57",
      "kind": "transparent"
    },
    {
      "address": "0xF1dbEddA8885292A9cafeaeC9A14ede53828A445",
      "txHash": "0x51788fad726f0697318c96f6d9b2f8c5ab65d2519c500fe0e964d56e151b1159",
      "kind": "transparent"
    }
  ],
  "impls": {
    "23176e77ce60d06f19141bcc9aeacc173d26b8bfd32b2a08e1bf155587de192f": {
      "address": "0xfD68b6C0aCA1fE5cf36787dabf9a1963Ea71c9fF",
      "txHash": "0x45607b18d378527fd1162e519b0daff36d02cce1937edf1aca6b01a4b11b8061",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "TuniverNFT",
            "label": "_tunivers",
            "type": "t_array(t_struct(Tuniver)8865_storage)dyn_storage",
            "src": "../project:/contracts/TuniverseNFT.sol:21"
          },
          {
            "contract": "TuniverNFT",
            "label": "paused",
            "type": "t_bool",
            "src": "../project:/contracts/TuniverseNFT.sol:22"
          },
          {
            "contract": "TuniverNFT",
            "label": "PERCENT",
            "type": "t_uint256",
            "src": "../project:/contracts/TuniverseNFT.sol:23"
          },
          {
            "contract": "TuniverNFT",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../project:/contracts/TuniverseNFT.sol:24"
          },
          {
            "contract": "TuniverNFT",
            "label": "ADMIN_ROLE",
            "type": "t_bytes32",
            "src": "../project:/contracts/TuniverseNFT.sol:25"
          },
          {
            "contract": "TuniverNFT",
            "label": "OPERATOR_ROLE",
            "type": "t_bytes32",
            "src": "../project:/contracts/TuniverseNFT.sol:26"
          },
          {
            "contract": "TuniverNFT",
            "label": "blacklist",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/TuniverseNFT.sol:28"
          }
        ],
        "types": {
          "t_array(t_struct(Tuniver)8865_storage)dyn_storage": {
            "label": "struct ITuniver.Tuniver[]"
          },
          "t_struct(Tuniver)8865_storage": {
            "label": "struct ITuniver.Tuniver",
            "members": [
              {
                "label": "typeId",
                "type": "t_uint256"
              },
              {
                "label": "isUnlock",
                "type": "t_bool"
              },
              {
                "label": "royalty",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8205c8459832b3cf816b377c47a92a1ceb90d08f6036fde05387b3f45b954e26": {
      "address": "0x28a89FF4BC4f9132600237eBBF30C527f5ae9e71",
      "txHash": "0x11a993ab20cc2f2afca6cdf33446ca593e8fd1336a57dc1df77366dcbebf2e39",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "contract": "TuniverBox",
            "label": "_collaborators",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Collaborator)11856_storage))",
            "src": "../project:/contracts/TuniverBox.sol:33"
          },
          {
            "contract": "TuniverBox",
            "label": "blacklist",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/TuniverBox.sol:34"
          },
          {
            "contract": "TuniverBox",
            "label": "collections",
            "type": "t_array(t_bool)dyn_storage",
            "src": "../project:/contracts/TuniverBox.sol:36"
          },
          {
            "contract": "TuniverBox",
            "label": "_boxes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/TuniverBox.sol:37"
          },
          {
            "contract": "TuniverBox",
            "label": "pricePerBox",
            "type": "t_uint256",
            "src": "../project:/contracts/TuniverBox.sol:38"
          },
          {
            "contract": "TuniverBox",
            "label": "paused",
            "type": "t_bool",
            "src": "../project:/contracts/TuniverBox.sol:39"
          },
          {
            "contract": "TuniverBox",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../project:/contracts/TuniverBox.sol:40"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Collaborator)11856_storage))": {
            "label": "mapping(address => mapping(uint256 => struct TuniverBox.Collaborator))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Collaborator)11856_storage)": {
            "label": "mapping(uint256 => struct TuniverBox.Collaborator)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Collaborator)11856_storage": {
            "label": "struct TuniverBox.Collaborator",
            "members": [
              {
                "label": "maxSupply",
                "type": "t_uint256"
              },
              {
                "label": "minted",
                "type": "t_uint256"
              },
              {
                "label": "mintedIds",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_bool)dyn_storage": {
            "label": "bool[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    }
  }
}
